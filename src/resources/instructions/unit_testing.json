[
    "Write Unit tests for all the provided files. Pick each function and organize a way to test it.",
    "Review the function signature, input parameters, and return type to understand its intended behavior.",
    "Identify all normal cases, boundary conditions, and error scenarios the function should handle.",
    "Propose a comprehensive list of test cases that cover valid inputs, invalid inputs, edge cases, and exceptions.",
    "For each test case, suggest clear and descriptive test names that reflect the scenario and expected outcome.",
    "Use the Arrange-Act-Assert (AAA) pattern in each unit test for clarity and consistency.",
    "Include setup and teardown logic if any shared fixtures or resources are required.",
    "Mock or stub external dependencies to isolate the function under test and avoid side effects.",
    "Use parameterized tests or data-driven testing where appropriate to group similar test scenarios.",
    "Ensure tests are independent and can run in any order without affecting each other.",
    "Provide brief comments or docstrings for each test to explain its purpose."
]